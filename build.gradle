/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id "io.freefair.lombok" version "8.4"
    id "java"
    id "maven-publish"
    id "signing"
}


group = "io.github.java-casbin"
version = "0.1.0"

repositories {
    mavenCentral()
}
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation "org.casbin:jcasbin:1.43.0"
    implementation "org.lightcouch:lightcouch:0.2.0"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.13.0"
    implementation "org.slf4j:slf4j-api:1.7.32"

    testImplementation platform("org.junit:junit-bom:5.9.1")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.13.0"
    testImplementation "ch.qos.logback:logback-classic:1.2.6"
    testImplementation "org.mockito:mockito-core:4.0.0"

    implementation "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams true
        exceptionFormat "full"
    }
}

task printVersion {
    doLast {
        println version
    }
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Casbin couchdb adapter'
                description = 'A couchdb adapter for Casbin'
                url = 'https://github.com/java-casbin/casbin-couchdb-adapter'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'zike'
                        name = 'Zike Yang'
                        email = 'zike@apache.org'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/java-casbin/casbin-couchdb-adapter.git'
                    developerConnection = 'scm:git:ssh://github.com:java-casbin/casbin-couchdb-adapte.git'
                    url = 'http://github.com/java-casbin/casbin-couchdb-adapter/tree/main'
                }
            }
        }
    }
}

task genPom(type: Copy) {
    dependsOn 'generatePomFileForMavenJavaPublication'
    from "${buildDir}/publications/mavenJava"
    into "${buildDir}/libs"
    include "*.xml"
    rename { String fileName ->
        if (fileName == 'pom-default.xml') {
            "${project.name}-${project.version}.pom"
        } else {
            fileName
        }
    }
}


task generateChecksums() {
    dependsOn genPom
    doLast {
        def filesToCheck = configurations.archives.allArtifacts.files
        // Add the pom-default.xml file to the list of files to check
        filesToCheck += file("${buildDir}/libs/${project.name}-${project.version}.pom")
        filesToCheck.each { file ->
            ['md5', 'sha1'].each { algorithm ->
                ant.checksum(file: file, algorithm: algorithm)
            }
        }
    }
}

task bundle(dependsOn: ['build', 'genPom', 'generateChecksums']) {
    doLast {
        println 'Bundle task completed.'
    }
}
